@startuml Class Diagram
skinparam classAttributeIconSize 0
skinparam packageStyle rectangle

package lib {
    class UserPreferences << (S,#FF7700) Static >> {
        +getUserPreferedReducedMotion(): boolean
        +getUserPreferedDarkMode(): boolean
        +getUserPreferedContrast(): string
    }
}

package types {
    enum AppState {
        MAIN_MENU
        IN_GAME
        OPTIONS
    }

    enum DialogType {
        NarratorDialog
        PlayerDialog
        PlayerOptionDialog
        NPCDialog
        ChapterEnd
    }

    enum Tag {
        diskriminierungstyp1
    }

    interface Chapter {
        +title: string
        +tags: Array<Tag<string>>
        +headDialog: Dialog
    }
    Chapter --> "1" Tag
    Chapter o-- Dialog

    interface Dialog {
        +dialogType: DialogType
    }

    interface NarratorDialog extends Dialog {
        +dialogType: DialogType.NarratorDialog
        +text: string
        +next: Dialog?
    }
    NarratorDialog o-- Dialog

    interface PlayerDialog extends Dialog {
        +dialogType: DialogType.PlayerDialog
        +text: string
        +next: Dialog?
    }
    PlayerDialog o-- Dialog

    interface PlayerOptionDialog extends Dialog {
        +dialogType: DialogType.PlayerOptionDialog
        +choices: Array<PlayerDialog>
    }
    PlayerOptionDialog o-- PlayerDialog

    interface NPCDialog extends Dialog {
        +dialogType: DialogType.NPCDialog
        +speaker: string
        +text: string
        +next: Dialog?
    }
    NPCDialog o-- Dialog

    interface DialogChoice {
        +text: string
        +onClick: Function<void>
    }

    interface DialogHistoryEntry {
        +speaker: string
        +isPlayer: boolean
        +isNarrator: boolean
        +text: string
    }

    enum ContrastOption {
        more
        less
        normal
    }

    interface OptionsDBType {
        +reduced-motion: boolean
        +dark-mode: boolean
        +contrast: ContrastOption
    }
    OptionsDBType <-- ContrastOption

    interface DBType {
        +options: OptionsDBType
    }
    DBType *- OptionsDBType

    interface OptionsBoolean {
        +name: string
        +value: boolean
        +setValueAsync(value: boolean): Promise<void>
    }

    interface OptionsString {
        +name: string
        +value: string
        +setValueAsync(value: string): Promise<void>
        +valueOptions: Array<string>
    }
}

package components {
    class Avatar {
        + render(): HTMLElement
    }
}

package model {
    class AppModel {
        -_state: AppState
        -_prevState: AppState?
        +get state: AppState
        -set state: AppState
        +get prevState: AppState?
        +startGame(): void
        +openOptions(): void
        +openMainMenu(): void
        +navigateBack(): boolean
    }
    AppModel --> "1" AppState

    class GameModel {
        -_endedChapters: Set<number>
        -_chapter: Chapter
        -_dialogHistory: Array<DialogHistoryEntry>
        -_currentDialog: Dialog?
        +get chapter: Chapter
        -set chapter: Chapter
        +get dialogHistory: Array<DialogHistoryEntry>
        -set dialogHistory: Array<DialogHistoryEntry>
        +get currentDialog: Readonly<Dialog>
        -set currentDialog: Readonly<Dialog>
        +get isFinished: boolean
        +continueDialogAsync(nextDialog: Dialog): Promise<void>
        +reset(): void
        +initChapter(): boolean
        -pushDialogHistory(entry: DialogHistoryEntry): void
    }
    GameModel *-- "1" Chapter

    class MainMenuModel
    class OptionsModel {
        -_db: IDBPDatabase<DBType>
        +getReducedMotionAsync(): Promise<boolean?>
        +setReducedMotionAsync(value: boolean): Promise<boolean>
        +getDarkModeAsync(): Promise<boolean?>
        +setDarkModeAsync(value: boolean): Promise<boolean>
        +getContrastAsync(): Promise<string>
        +setContrastAsync(value: string): Promise<string>
        -getSettingAsync<K extends keyof OptionsDBType>(option: K): Promise<OptionsDBType[K]>
        -setSettingAsync<K extends keyof OptionsDBType,T extends OptionsDBType[K]>(option: K, value: T): Promise<T>
    }
    OptionsModel <.. DBType
    OptionsModel <.. OptionsDBType
}

package viewmodel {
    class AppViewModel {
        -_appModel: AppModel
        +get state: AppState
    }
    AppViewModel *-- "1" AppModel
    AppViewModel --- "1" AppState

    class GameViewModel {
        -_gameModel: GameModel
        -_appModel: AppModel
        +nextChapter: Function<void>
        +mainMenu: Function<void>
        +openOptions: Function<void>
        +get dialogHistory: Array<DialogHistoryEntry>
        +get sceneTitle: Array<string>
        -chapterEndInput(): { speaker: string; choices: Array<DialogChoice>; }
        +currentDialog: { speaker: string; choices: DialogChoice[]; }
        +isFinished: boolean
    }
    GameViewModel *-- "1" GameModel
    GameViewModel *-- "1" AppModel

    class MainMenuViewModel {
        -_mainMenuModel: MainMenuModel
        -_gameModel: GameModel
        -_appModel: AppModel
        +startGame: MouseEventHandler<Element>
        +openOptions: MouseEventHandler<Element>
    }
    MainMenuViewModel *-- "1" MainMenuModel
    MainMenuViewModel *-- "1" GameModel
    MainMenuViewModel *-- "1" AppModel

    class OptionsViewModel {
        -_optionsModel: OptionsModel
        -_appModel: AppModel
        +onClickBack: MouseEventHandler<Element>
        +updateDocumentData(data: Record<string, any>): void
        +useSettingsAsync(): Promise<Array<OptionsBoolean | OptionsString>>
    }
    OptionsViewModel *-- "1" OptionsModel
    UserPreferences -up-> OptionsViewModel
}

package view {
    class AppView {
        -_appViewModel: AppViewModel
        +render(): HTMLElement
    }
    AppView *-- "1" AppViewModel

    class GameView {
        -_gameViewModel: GameViewModel
        +render(): HTMLElement
    }
    GameView *-- "1" GameViewModel
    Avatar "1..*" -down-* "1" GameView

    class MainMenuView {
        -_mainMenuViewModel: MainMenuViewModel
        +render(): HTMLElement
    }
    MainMenuView *-- "1" MainMenuViewModel

    class OptionsView {
        -_optionsViewModel: OptionsViewModel
        -_settings: Array<OptionsBoolean | OptionsString>
        +render(): HTMLElement
    }
    OptionsView *-- "1" OptionsViewModel
}

@enduml

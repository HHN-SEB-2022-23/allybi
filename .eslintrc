{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint", "unused-imports"],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended"
  ],
  "rules": {
    "semi": ["error", "never"],
    "quotes": ["error", "double"],
    "max-depth": ["error", 3],
    "max-nested-callbacks": ["error", 3],
    "max-len": ["error", 80],
    "prefer-const": "error",
    "no-console": "error",
    "unused-imports/no-unused-imports": "error",
    "@typescript-eslint/no-unused-vars": "error",
    "unused-imports/no-unused-vars": [
      "warn",
      {
        "vars": "all",
        "varsIgnorePattern": "^_",
        "args": "after-used",
        "argsIgnorePattern": "^_"
      }
    ],
    "max-lines-per-function": [
      "error",
      { "max": 30, "skipBlankLines": true, "skipComments": true }
    ],
    "no-restricted-syntax": [
      "error",
      {
        "selector": "FunctionDeclaration[async=false][id.name=/Async$/]",
        "message": "Function ending in 'Async' must be declared async"
      },
      {
        "selector": "FunctionDeclaration[async=true][id.name!=/Async$/]",
        "message": "Async function name must end in 'Async'"
      },
      {
        "selector": "MethodDefinition[value.async=false][key.name=/Async$/]",
        "message": "Method ending in 'Async' must be declared async"
      },
      {
        "selector": "MethodDefinition[value.async=true][key.name!=/Async$/]",
        "message": "Async method name must end in 'Async'"
      },
      {
        "selector": "Property[value.type=/FunctionExpression$/][value.async=false][key.name=/Async$/]",
        "message": "Function ending in 'Async' must be declared async"
      },
      {
        "selector": "Property[value.type=/FunctionExpression$/][value.async=true][key.name!=/Async$/]",
        "message": "Async function name must end in 'Async'"
      },
      {
        "selector": "VariableDeclarator[init.type=/FunctionExpression$/][init.async=false][id.name=/Async$/]",
        "message": "Function ending in 'Async' must be declared async"
      },
      {
        "selector": "VariableDeclarator[init.type=/FunctionExpression$/][init.async=true][id.name!=/Async$/]",
        "message": "Async function name must end in 'Async'"
      }
    ]
  }
}
